#summary One-sentence summary of this page.

= Introduction =

osgi-samples/hibernate demonstrates how to use Hibernate in OSGi.  

The solution is roughly based on this [http://www.osgi.org/blog/labels/osgi%20hibernate%20felix%20equinox%20eclipse%20knopflerfish%20sql.html  OSGi and Hibernate blog entry] by Peter Kriens.
Peter's design uses a declaration in the manifest file to declaratively add classes to the Hibernate session using an _extender model_.  In our implementation however, we currently do not use the extender model but instead explicitly add new classes to the Hibernate session through a bundle activator.

== Get the code ==

To get the source code for the hibernate sample, use SVN:

svn checkout http://voluble.googlecode.com/svn/trunk/osgi-samples/hibernate/ osgi-hibernate-sample

== Run the code ==

You should then be able to run "mvn install" in the new osgi-hibernate-sample folder and see all projects build successfully.  

  _At the moment you need to first manually start a HSQLDB database before the tests will run.  After downloading a hsqldb.jar, you can start the database from the command line using:_

{{{
 java -cp hsqldb.jar org.hsqldb.Server -database.0 file:osgi-hibernate-sample.db -dbname.0 osgi-hibernate-sample
}}}

  (Hopefully this is temporary and we'll soon change the code to start the database automatically)

== Understanding the code ==

The implementation demonstrates how OSGi bundles can dynamically add new classes to a Hibernate configuration.  We start with a bundle that provides a Hibernate SessionFactory - other bundles can grab and use the SessionFactory to access the database.  However, if a new bundle is installed and it defines new entity classes that was not in the SessionFactory configuration when it was created, then the SessionFactory must be recreated to update the configuration with the new classes.



You'll see the sample consists of a list of modules.  They are described here:

|| *provision* || Downloads resources to get them into the maven repository ||
|| *hibernate-classes* || Downloads and assembles Hibernate classes into an OSGi bundle ||
|| *hibernate-session* || Provides a Hibernate SessionFactory that can be dynamically reconfigured (by adding new classes to it or removing classes from it).  The bundle exports a service, DynamicConfiguration, which other bundles can use to register their contributions to the SessionFactory.   The DynamicConfiguration service also acts as a factory for SessionFactory. ||


# application-a/
# application-b/
# deployment/
# hsqldb/
# integration-tests/
# jta/
# model-a/
# model-b/